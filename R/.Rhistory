sampleData <- cbind.data.frame(sampleData$id, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "sentiment", "candidate", "text")
levels(sampleData$candidate)
# Categorize blank as no candidate (can be multiple but we don't care)
sampleData[sampleData$candidate == "","candidate"] <- "No candidate mentioned"
sampleData[sampleData$candidate == "Ben Carson","candidate"] <- ""
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram()
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "sentiment", "candidate", "text")
# Categorize blank as no candidate (can be multiple but we don't care)
sampleData[sampleData$candidate == "","candidate"] <- "No candidate mentioned"
# ...and remove
sampleData <- sampleData[sampleData$candidate!="No candidate mentioned",]
sampleData[sampleData$candidate == "Ben Carson","candidate"] <- ""
sampleData[sampleData$candidate == "Jeb Bush",] <- ""
sampleData[sampleData$candidate == "Chris Christie",] <- ""
sampleData[sampleData$candidate == "Mike Huckabee",] <- ""
sampleData[sampleData$candidate == "Scott Walker",] <- ""
sampleData[sampleData$candidate == "Rand Paul",] <- ""
levels(sampleData$candidate) <- c("Donald Trump", "Ted Cruz", "John Kasich", "Marco Rubio", "Other", "")
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram()
levels(sampleData$candidate)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram()
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram()
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(plotOthers=FALSE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(plotOthers=FALSE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(plotOthers=FALSE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(plotOthers=FALSE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(plotOthers=FALSE)
buildHistogram(plotOthers=TRUE)
dev.copy(png,'AugustCandidates.png')
dev.off()
buildHistogram(plotOthers=FALSE)
dev.copy(png,'AugustCandidatesTopFour.png')
dev.off()
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(plotOthers=FALSE)
dev.copy(png,'AugustCandidatesTopFour.png')
dev.off()
buildHistogram(plotOthers=TRUE)
dev.copy(png,'AugustCandidates.png')
dev.off()
buildHistogram(csvPath="excel/unlabled_python_ensemble.csv")
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv")
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv")
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
csvPath = "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "sentiment", "candidate", "text")
print(levels(sampleData$candidate))
# Categorize blank as no candidate (can be multiple but we don't care)
sampleData[sampleData$candidate == "","candidate"] <- "No candidate mentioned"
# ...and remove
sampleData <- sampleData[sampleData$candidate!="No candidate mentioned",]
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv")
dev.copy(png,'MarchAll.png')
dev.off()
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv")
dev.copy(png,'MarchAfter.png')
dev.off()
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv")
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv")
dev.copy(png,'MarchAfter.png')
dev.off()
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv")
dev.copy(png,'MarchBefore.png')
dev.off()
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=TRUE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=TRUE)
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=FALSE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=FALSE)
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=TRUE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=TRUE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=TRUE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=TRUE)
length(sampleData)
csvPath="excel/unlabeled_python_ensemble.csv"
plotBefore <- TRUE
plotAfter <- TRUE
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "sentiment", "candidate", "text")
levels(sample$candidate)
levels(sampleData$candidate)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
length(sampleData$candidate)
length(sampleData$candidate[sampleData$candidate=="John Kasich"])
length(sampleData$candidate[sampleData$candidate=="Marco Rubio"])
length(sampleData$candidate[sampleData$candidate!="Marco Rubio"])
sampleData <- sampleData[sampleData$candidate!="John Kasich",]
dim(sampleDAta)
dim(sampleData)
sampleData <- sampleData[sampleData$candiddate!="Marco Rubio",]
dim(sampleData)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=TRUE)
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=FALSE)
buildHistogram(csvPath="AugSentiment.csv", topOnly=FALSE)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
buildHistogram(csvPath="excel/unlabeled_python_ensemble.csv", topOnly=FALSE)
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "sentiment", "tweet_location", "candidate", "text")
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
sampleData[1:10,]
sampleData$state[1:10]
sampleData$state[1:50]
sampleData$tweet_location[1:50,]
sampleData$tweet_location[1:50]
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "tweet_location", "sentiment", "candidate", "text")
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
sampleData$state[1:50]
sampleData$state[sampleData$state=="virginia"]
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "tweet_location", "sentiment", "candidate", "text")
# Filter out tweets that don't have a recognizable state
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
sampleData <- sampleData[sampleData$state == "",]
length(sampleData)
dim(sampleData)
nationalNegSum <- length(sampleData[sampleData$sentiment=="Negative"])
nationalTotal <- dim(sampleData)[1]
nationalNegRatio <- nationalNegSum / nationalTotal
nationalNegSum <- dim(sampleData[sampleData$sentiment=="Negative"])[1]
nationalTotal <- dim(sampleData)[1]
nationalNegRatio <- nationalNegSum / nationalTotal
nationalNegSum <- dim(sampleData[sampleData$sentiment=="Negative",])[1]
nationalTotal <- dim(sampleData)[1]
nationalNegRatio <- nationalNegSum / nationalTotal
nationalNegSum
nationalNegRatio
stateMatrix = read.csv("states.csv", header=TRUE)
dim(stateMatrix)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "tweet_location", "sentiment", "candidate", "text")
# Filter out tweets that don't have a recognizable state
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
sampleData <- sampleData[sampleData$state == "",]
nationalNegSum <- dim(sampleData[sampleData$sentiment=="Negative",])[1]
nationalTotal <- dim(sampleData)[1]
nationalNegRatio <- nationalNegSum / nationalTotal
nationalPosRatio <- 1 - nationalNegRatio
stateMatrix = read.csv("states.csv", header=TRUE)
stateMatrix[0,"negRatio"] = nationalNegRatio
statematrix[0,"posRation"] = 1 - nationalNegRatio
# Now find the per state ration and absolute value difference from the mean
for (rowNum in 1:dim(stateMatrix)[1])
{
if (stateMatrix$State[rowNum] == "USA")
{
stateMatrix[rowNum,"negRatio"] = nationalNegRatio
statematrix[rowNum,"posRatio"] = nationalPosRatio
continue;
}
else {
curState = stateMatrix$State[rowNum]
curStateData <- sampleData[sampleData$state==State,]
stateNegSum <- dim(curStateData[curStateData$sentiment=="Negative",])[1]
stateTotal <- dim(curStateData)[1]
stateNegRatio <- stateNegSum / stateTotal
statePosRatio <- 1 - stateNegRatio
# What we write out is actually the difference
stateNegDiff <- nationalNegRatio - stateNegRatio
statePosDiff <- nationalPosRatio - statePosRatio
stateMatrix$posRatio[rowNum] <- stateNegDiff
stateMatrix$negRatio[rowNum] <- statePosDiff
}
}
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "tweet_location", "sentiment", "candidate", "text")
# Filter out tweets that don't have a recognizable state
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
sampleData <- sampleData[sampleData$state == "",]
nationalNegSum <- dim(sampleData[sampleData$sentiment=="Negative",])[1]
nationalTotal <- dim(sampleData)[1]
nationalNegRatio <- nationalNegSum / nationalTotal
nationalPosRatio <- 1 - nationalNegRatio
stateMatrix = read.csv("states.csv", header=TRUE)
# Now find the per state ration and absolute value difference from the mean
for (rowNum in 1:dim(stateMatrix)[1])
{
if (stateMatrix$State[rowNum] == "USA")
stateMatrix[rowNum,"negRatio"] = nationalNegRatio
stateMatrix[rowNum,"posRatio"] = nationalPosRatio
continue;
}
else {
curState = stateMatrix$State[rowNum]
curStateData <- sampleData[sampleData$state==State,]
stateNegSum <- dim(curStateData[curStateData$sentiment=="Negative",])[1]
stateNegDiff <- 0
statePosDiff <- 0
stateTotal <- dim(curStateData)[1]
stateNegRatio <- stateNegSum / stateTotal
statePosRatio <- 1 - stateNegRatio
# What we write out is actually the difference
stateNegDiff <- nationalNegRatio - stateNegRatio
statePosDiff <- nationalPosRatio - statePosRatio
stateMatrix$posRatio[rowNum] <- stateNegDiff
stateMatrix$negRatio[rowNum] <- statePosDiff
}
}
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "tweet_location", "sentiment", "candidate", "text")
# Filter out tweets that don't have a recognizable state
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
sampleData <- sampleData[sampleData$state == "",]
nationalNegSum <- dim(sampleData[sampleData$sentiment=="Negative",])[1]
nationalTotal <- dim(sampleData)[1]
nationalNegRatio <- nationalNegSum / nationalTotal
nationalPosRatio <- 1 - nationalNegRatio
stateMatrix = read.csv("states.csv", header=TRUE)
# Now find the per state ration and absolute value difference from the mean
for (rowNum in 1:dim(stateMatrix)[1])
{
if (stateMatrix$State[rowNum] == "USA")
{
stateMatrix[rowNum,"negRatio"] = nationalNegRatio
stateMatrix[rowNum,"posRatio"] = nationalPosRatio
} else
{
curState = stateMatrix$State[rowNum]
curStateData <- sampleData[sampleData$state==State,]
stateNegSum <- dim(curStateData[curStateData$sentiment=="Negative",])[1]
stateNegDiff <- 0
statePosDiff <- 0
stateTotal <- dim(curStateData)[1]
stateNegRatio <- stateNegSum / stateTotal
statePosRatio <- 1 - stateNegRatio
# What we write out is actually the difference
stateNegDiff <- nationalNegRatio - stateNegRatio
statePosDiff <- nationalPosRatio - statePosRatio
stateMatrix$posRatio[rowNum] <- stateNegDiff
stateMatrix$negRatio[rowNum] <- statePosDiff
}
}
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "tweet_location", "sentiment", "candidate", "text")
# Filter out tweets that don't have a recognizable state
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
sampleData <- sampleData[sampleData$state == "",]
nationalNegSum <- dim(sampleData[sampleData$sentiment=="Negative",])[1]
nationalTotal <- dim(sampleData)[1]
nationalNegRatio <- nationalNegSum / nationalTotal
nationalPosRatio <- 1 - nationalNegRatio
stateMatrix = read.csv("states.csv", header=TRUE)
rowNum=0
dim(stateMatrix)[1]
stateMatrix$State[rowNum] == "USA"
stateMatrix$State[0] == "USA"
stateMatrix$State[0]
stateMatrix$State[1]
rowNum=1
stateMatrix[rowNum,"negRatio"] = nationalNegRatio
stateMatrix[rowNum,"posRatio"] = nationalPosRatio
rowNum=2
stateMatrix$State[2]
curState = stateMatrix$state[rowNum]
curStateData <- sampleData[sampleData$state==curState,]
dim(curState)
sampleData$state[1:10]
levels(sampleData$state)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "tweet_location", "sentiment", "candidate", "text")
# Filter out tweets that don't have a recognizable state
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
sampleData <- sampleData[sampleData$state != "",]
nationalNegSum <- dim(sampleData[sampleData$sentiment=="Negative",])[1]
nationalTotal <- dim(sampleData)[1]
nationalNegRatio <- nationalNegSum / nationalTotal
nationalPosRatio <- 1 - nationalNegRatio
levels(sampleData$state)
dim(sampleData)
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
levels(sampleData$state)
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
newColumn <-  rep("", length(sampleData$tweet_location))
stateList <- c("alabama",
"alaska",
"arizona",
"arkansas",
"california",
"colorado",
"connecticut",
"delaware",
"district of columbia",
"florida",
"georgia",
"hawaii",
"idaho",
"illinois",
"indiana",
"iowa",
"kansas",
"kentucky",
"louisiana",
"maine",
"maryland",
"massachusetts",
"michigan",
"minnesota",
"mississippi",
"missouri",
"montana",
"nebraska",
"nevada",
"new hampshire",
"new jersey",
"new mexico",
"new york",
"north carolina",
"north dakota",
"ohio",
"oklahoma",
"oregon",
"pennsylvania",
"rhode island",
"south carolina",
"south dakota",
"tennessee",
"texas",
"utah",
"vermont",
"virginia",
"washington",
"west virginia",
"wisconsin",
"wyoming")
abbrevList <- c(", AL", ", AK", ", AZ", ", AR",
", CA", ", CO", ", CT", ", DE",
", DC", ", FL", ", GA", ", HI",
", ID", ", IL", ", IN", ", IA",
", KS", ", KY", ", LA", ", ME",
", MD", ", MA", " ,MI",
", MN",
", MS",
", MO",
", MT",
", NE",
", NV",
", NH",
", NJ",
", NM",
", NY",
", NC",
", ND",
", OH",
", OK",
", OR",
", PA",
", RI",
", SC",
", SD",
", TN",
", TX",
", UT",
", VT",
", VA",
", WA",
", WV",
", WI",
", WY"
)
if (length(stateList) != length(abbrevList))
{
print("Warning, state list doesn't match abbreviation list!")
return
}
for (i in 1:length(stateList))
{
stateHits <- rbind(
grep(stateList[i], locationColumn, ignore.case=TRUE),
grep(abbrevList[i], locationColumn, ignore.case=TRUE)
)
newColumn[stateHits] <- rep(stateList[i], length(stateHits))
}
sampleData$state <- newColumn
length(sampleData$state)
sampleData$state[1:10]
sampleData <- sampleData[sampleData$state != "",]
dim(sampleData)
csvPath <- "excel/unlabeled_python_ensemble.csv"
sampleData <- read.csv(csvPath,
header = TRUE)
sampleData <- cbind.data.frame(sampleData$id, sampleData$tweet_location, sampleData$sentiment,
sampleData$candidate, sampleData$text)
colnames(sampleData) <- c("id", "tweet_location", "sentiment", "candidate", "text")
# Filter out tweets that don't have a recognizable state
sampleData$state <- createUSStatesFromColumn(sampleData$tweet_location)
length(sampleData$state)
sampleData <- sampleData[sampleData$state != "",]
length(sampleData$state)
levels(sampleData$state)
sampleData$stae[1:10]
newColumn <-  rep("", length(sampleData$tweet_location))
for (i in 1:length(stateList))
{
stateHits <- rbind(
grep(stateList[i], locationColumn, ignore.case=TRUE),
grep(abbrevList[i], locationColumn, ignore.case=TRUE)
)
newColumn[stateHits] <- rep(stateList[i], length(stateHits))
}
length(newColumn)
sampleData$state <- newColumn
levels(newColumn)
newColumn[1:10]
sampleData$state[1:10]
testsampleData <- sampleData[sampleData$state != "",]
dim(testSampleData)
dim(testsampleData)
sampleData[sampleData$state!="",]
length(sampleData[sampleData$state!="",])
`dim(sampleData[sampleData$state!="",])
)
)
end
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
''
'
###:::
source('~/GitHub/data-mining-debate-analysis/R/tweetClassification.R', encoding = 'UTF-8')
